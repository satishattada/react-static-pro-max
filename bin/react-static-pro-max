#!/usr/bin/env node
const path = require('path')
//

init().catch(e => {
  console.trace(e)
  process.exit(1)
})

function init() {
  const pkg = require('../package.json')
  let packageConfig = {}
  try {
    packageConfig = require(path.resolve(process.cwd(), 'package.json'))
    packageConfig = packageConfig['react-static-pro-max'] || {}
  } catch (err) {
    //
  }
  const argv = require('minimist')(process.argv.slice(2))

  const commands = argv._
  const help = argv.help || argv.h || argv.H
  const options = {
    version: argv.version || argv.v || argv.V,
    configPath: argv.config || argv.c || argv.C,
    name: argv.name || argv.n || argv.N,
    template: argv.template || argv.t || argv.T,
    staging: argv.staging || argv.s || argv.S,
    debug: argv.debug || argv.d || argv.D,
    incremental: argv.incremental || argv.i || argv.I,
    analyze: argv.analyze || argv.a || argv.A,
    isCLI: true,
    packageConfig,
  }

  if (options.version) {
    console.log(pkg.version)
    return new Promise(res => res(pkg.version))
  }

  if (commands[0] === 'create') {
    return create(options, help)
  }

  if (commands[0] === 'start') {
    return start(options, help)
  }

  if (commands[0] === 'export') {
    return exportFn(options, help)
  }
  if (commands[0] === 'bundle') {
    return bundle(options, help)
  }

  if (commands[0] === 'build') {
    return build(options, help)
  }

  console.log(`
React Static - ${pkg.description}
Version: ${pkg.name}@${pkg.version}

Usage: react-static-pro-max <command> [options]

Options:
  -V, --version  output the version number
  -h, --help     output usage information for any given command

Commands:
  create         create a new project
  start          start the development server
  build          build (bundle + export) site for production
  bundle         bundle webpack assets
  export         export html from bundled assets
  help [cmd]     display help for [cmd]

Examples:

  $ react-static-pro-max -v
  $ react-static-pro-max create
  $ react-static-pro-max start
  $ react-static-pro-max build
  $ react-static-pro-max bundle
  $ react-static-pro-max export

  `)

  return Promise.resolve()
}

function create(options, help) {
  if (help) {
    console.log(`
Description: Creates a new React Static project
  
Options:
  -n, --name <name>                 The name of your new project
  -t, --template <template-name>    The react-static-pro-max template for your project

Examples:
  react-static-pro-max create
  react-static-pro-max create --name= my-static-site
  react-static-pro-max create -n my-static-site
  react-static-pro-max create -n my-static-site --template styled-components
`)
    return
  }
  require('../lib/utils/binHelper')
  return require('../lib/commands/create').default(options)
}

function start(options, help) {
  if (help) {
    console.log(`
Description: Starts the local development server for a React Static project
  
Options:
  -c, --config <path>   The path to a custom static.config.js
  -d, --debug           Turn on debug mode

Examples:
  react-static-pro-max start
  react-static-pro-max start --config=path/to/my/static.config.js
  react-static-pro-max start -c path/to/my/static.config.js
  react-static-pro-max start --debug
  react-static-pro-max start -d
`)
    return
  }
  require('../lib/utils/binHelper')
  return require('../lib/commands/start').default(options)
}

function exportFn(options, help) {
  if (help) {
    console.log(`
Description: Exports a pre-bundled React Static project to a static site.
  
Options:
  -c, --config <path>   The path to a custom static.config.js
  -s, --staging         Turn on staging mode
  -i, --incremental     Turn on incremental build mode
  -d, --debug           Turn on debug mode

Examples:
  react-static-pro-max export
  react-static-pro-max export --config=path/to/my/static.config.js
  react-static-pro-max export -c path/to/my/static.config.js
  react-static-pro-max export --incremental
  react-static-pro-max export -i
  react-static-pro-max export --debug
  react-static-pro-max export -d
`)
    return
  }
  require('../lib/utils/binHelper')
  return require('../lib/commands/export').default(options)
}

function bundle(options, help) {
  if (help) {
    console.log(`
Description: Bundles a React Static project and prepares it for export

Options:
  -c, --config <path>   The path to a custom static.config.js
  -s, --staging         Turn on staging mode
  -d, --debug           Turn on debug mode
  -a, --analyze         Turn on the bundle analyzer

Examples:
  react-static-pro-max bundle
  react-static-pro-max bundle --config=path/to/my/static.config.js
  react-static-pro-max bundle -c path/to/my/static.config.js
  react-static-pro-max bundle --debug
  react-static-pro-max bundle -d
  react-static-pro-max build --analyze
  react-static-pro-max build -a
`)
    return
  }

  require('../lib/utils/binHelper')
  return require('../lib/commands/bundle').default(options)
}

function build(options, help) {
  if (help) {
    console.log(`
Description:
  - Bundles a React Static project
  - Exports the bundled React Static project to a static site.
  
Options:
  -c, --config <path>   The path to a custom static.config.js
  -s, --staging         Turn on staging mode
  -d, --debug           Turn on debug mode
  -a, --analyze         Turn on the bundle analyzer

Examples:
  react-static-pro-max build
  react-static-pro-max build --config=path/to/my/static.config.js
  react-static-pro-max build -c path/to/my/static.config.js
  react-static-pro-max build --debug
  react-static-pro-max build -d
  react-static-pro-max build --analyze
  react-static-pro-max build -a
`)
    return
  }
  require('../lib/utils/binHelper')
  return require('../lib/commands/build').default(options)
}
